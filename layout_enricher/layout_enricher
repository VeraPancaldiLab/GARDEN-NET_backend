#!/usr/bin/env node

const fs        = require('fs');
const program   = require('commander');
const cytoscape = require('cytoscape');

// Detect if the input is a PIPE or file
program
  .usage('json_cytoscape_file\n  or   layout_enricher < json_cytoscape_file\n  or   | layout_enricher')

// If the input is a file
if(process.stdin.isTTY) {
  program.parse(process.argv);
  if (program.args.length !== 1) {
    program.help()
  } else {
    let json_cytoscape_file = program.args[0]
    fs.readFile(json_cytoscape_file, (err, file_content) => {
      if (err) throw err;
      build_network(file_content)
    });
  }
}
  // If the input is a sdtin
else {
  var inputChunks = [];

  process.stdin.setEncoding('utf8');

  // Read stdin using chunks
  process.stdin.on('readable', () => {
    const chunk = process.stdin.read();
    if (chunk !== null) {
      inputChunks.push(chunk);
    }
  });

  // When there is not more stdin to read join all the chunks in a string and build the igraph network
  process.stdin.on('end', function () {
    var input_string = inputChunks.join('');
    if (input_string == '{}') {
      process.stdout.write('{}');
    } else {
      build_network(input_string)
    }
  });
}

// function to build the igraph network with the cose layout
function build_network(input_string) {

  // Convert the input string to a json hash to load the igraph elements
  var parsedJSON = JSON.parse(input_string);

  var network = cytoscape({
    elements: parsedJSON,
    layout: {
      name: 'preset'
    }
  });

  // Use cose layout and customize the parameters a bit
  var layout = network.layout({
    name: 'cose',
    animate: false,
    randomize: true,
    idealEdgeLength: 100,
    nodeOverlap: 20,
    refresh: 20,
    fit: true,
    padding: 30,
    componentSpacing: 100,
    nodeRepulsion: 400000,
    edgeElasticity: 100,
    nestingFactor: 5,
    gravity: 80,
    numIter: 1000,
    initialTemp: 200,
    coolingFactor: 0.95,
    minTemp: 1.0
  });

  // Add write to sdtout handler to the layoutstop event
  layout.on('layoutstop', write);

  // The layout is calculated asynchronously
  layout.run();

  // function to write to the stdout using stringify
  function write(){
    outputJSON = JSON.stringify(network.elements().jsons(), null, '  ');
    process.stdout.write(outputJSON);
  }
}
